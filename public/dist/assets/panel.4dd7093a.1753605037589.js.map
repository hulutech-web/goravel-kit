{"version":3,"file":"panel.4dd7093a.1753605037589.js","sources":["../../src/components/groupcourse/index.vue","../../src/components/hlgfullcalendar/options.ts","../../src/components/hlgfullcalendar/index.vue","../../src/pages/schedule/panel.vue"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <a-button type=\"primary\" @click=\"openModal = true\">\n        <template #icon>\n          <ImportOutlined/>\n        </template>\n      </a-button>\n      <span class=\"font-bold text-gray-500 text-sm\">\n        编号：【{{ props.course_id }}】\n        课名：【{{ props.course_name }}】\n        场馆：【{{ props.venue_name }}】\n      </span>\n    </div>\n    <div class=\"mt-1\">\n      <a-modal v-model:visible=\"openModal\" title=\"选择课程\" centered width=\"800px\">\n        <a-input-search\n            v-model:value=\"title\"\n            enter-button\n            @search=\"fillData\"\n            class=\"mb-2\"\n            placeholder=\"请输入课程\"\n        />\n        <a-table :dataSource=\"dataSource\" :columns=\"columns\" bordered size=\"small\">\n          <template #bodyCell=\"{ column, record }\">\n            <template v-if=\"column.key === 'id'\">\n              {{record.id}}\n            </template>\n            <template v-if=\"column.key === 'coach_name'\">\n              {{record.coach.realname}}\n            </template>\n            <template v-if=\"column.key === 'title'\">\n              {{record.title}}\n            </template>\n            <template v-if=\"column.key === 'action'\">\n              <a-button type=\"primary\" @click=\"selectOne(record)\">\n                <CheckOutlined/>\n                选择\n              </a-button>\n            </template>\n            <template v-if=\"column.key === 'venue_name'\">\n              {{record.venue.name}}\n            </template>\n          </template>\n        </a-table>\n      </a-modal>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport Api from \"@/api\"\n\nconst dataSource = ref([]);\nconst props = defineProps({\n  course_id: {\n    type: Number,\n    default: 0,\n  },\n  course_name: {\n    type: String,\n    default: \"\",\n  },\n  venue_name:{\n    type:String,\n    default:\"\"\n  }\n});\nconst columns = [\n  {\n    dataIndex: \"id\",\n    title: \"课程ID\",\n    key: \"id\",\n  },\n  {\n    dataIndex: \"title\",\n    title: \"课程名称\",\n    key: \"title\",\n  },\n  {\n    dataIndex: \"coach_name\",\n    title: \"教练\",\n    key: \"coach_name\",\n  },\n  {\n    dataIndex: \"venue_name\",\n    title: \"场馆\",\n    key: \"venue_name\",\n  },\n  {\n    dataIndex: \"action\",\n    title: \"操作\",\n    key: \"action\",\n  },\n];\nconst title = ref(\"\");\nonMounted(() => {\n  fillData();\n});\nconst fillData = async () => {\n  const {data} = await Api.courseController.index({title: title.value});\n  if(data&&data.length>0){\n    dataSource.value = data.map(item=>{\n      return {\n        ...item,\n        venue_name:item.venue.name,\n      }\n    })\n  }\n  console.log(\"dataSource\",dataSource.value)\n};\nconst openModal = ref(false);\nconst emit = defineEmits([\"update:course_id\", \"update:course_name\",\"update:venue_name\"]);\nconst selectOne = (row) => {\n  //提交数据到父组件\n  emit(\"update:course_id\", row.id);\n  emit(\"update:course_name\", row.title);\n  emit(\"update:venue_name\", row.venue.name);\n  openModal.value = false;\n};\n</script>\n\n<style scoped></style>\n","import dayGridPlugin from \"@fullcalendar/daygrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport momentPlugin from \"@fullcalendar/moment\";\nimport listPlugin from '@fullcalendar/list';\nimport zhLocale from \"@fullcalendar/core/locales/zh-cn\";\nimport Api from \"@/api\"\nconst colorPalette = [\n    '#FF0000', // Vivid Red\n    '#FF4500', // Orange Red\n    '#FFA500', // Orange\n    '#FFD700', // Gold\n    '#FFFF00', // Yellow\n    '#9ACD32', // Yellow Green\n    '#00FF00', // Lime\n    '#00FA9A', // Medium Spring Green\n    '#00FFFF', // Cyan\n    '#1E90FF', // Dodger Blue\n    '#0000FF', // Blue\n    '#8A2BE2', // Blue Violet\n    '#9932CC', // Dark Orchid\n    '#FF00FF', // Magenta\n    '#FF1493', // Deep Pink\n    '#FF69B4', // Hot Pink\n    '#FF6347', // Tomato\n    '#FF8C00', // Dark Orange\n    '#7CFC00', // Lawn Green\n    '#40E0D0'  // Turquoise\n];\n\nfunction getRandomColor() {\n    return colorPalette[Math.floor(Math.random() * colorPalette.length)];\n}\n\nconst formatTime = (timeString) => {\n    const time = new Date(timeString);\n    const hours = time.getHours().toString().padStart(2, '0');\n    const minutes = time.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n}\nconst baseUrl = import.meta.env.VITE_API_URL;\nconst port = import.meta.env.VITE_API_PORT;\n\n\nexport default (eventClickCallback, dateClickCallback,\n                eventDidMountCallback,\n                selEventCallback,\n                eventAddCallback,\n                eventChangeCallback,\n                eventContentCallback,\n                eventMouseEnterCallback,\n                eventMouseLeaveCallback,\n                eventDropCallback) => {\n    return {\n\n        aspectRatio: 10,\n        expandRows: true,\n        plugins: [\n            dayGridPlugin,\n            interactionPlugin,\n            timeGridPlugin,\n            momentPlugin,\n            listPlugin\n        ],\n        themeSystem: 'bootstrap', // 使用主题系统\n        //eventBackgroundColor: 'rgb(214,231,254)', // 事件背景色\n        eventBorderColor: '#3788d8', // 事件边框色\n        // 高度：每一格400px\n        height: \"1000px\",\n        slotMinTime: \"09:00:00\",\n        slotMaxTime: \"21:00:00\",\n        initialView: \"timeGridDay\",\n        // dayHeaderFormat: {\n        //     weekday: \"short\",\n        // },\n        slotEventOverlap: false,\n        contentHeight:600,\n        slotDuration: \"00:10:00\",\n        slotLabelInterval: \"01:00:00\",\n        selectMirror: true,\n        locale: zhLocale,\n        buttonText: {\n            month: \"月\",\n            week: \"周\",\n            day: \"日\",\n            list:\"列表\",\n        },\n        dayMaxEvents: true,\n        headerToolbar: {\n            left: \"prev,next today\",\n            center: \"title\",\n            right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\",\n        },\n        customButtons: {\n            button: {\n                text: 'custom',\n                click: function () {\n                    alert('clicked the custom button!');\n                }\n            }\n        },\n        selectable: true,\n        weekNumbers: true,\n        views: {\n            timeGridFourDay: {\n                type: \"timeGrid\",\n                duration: {\n                    days: 7,\n                },\n            },\n        },\n        events: async (fetchInfo, successCallback, failureCallback) => {\n            console.log(\"1、fetchInfo\")\n            try {\n                let data = await Api.scheduleController.list({startStr: fetchInfo.startStr, endStr: fetchInfo.endStr})\n                let req = data.map(item => {\n                    return {\n                        ...item,\n                        title: item.course.title,\n                        start: item.start_time,\n                        end: item.end_time,\n                        id: item.id.toString() // 确保ID是字符串\n                    }\n                })\n                successCallback(req)\n            }catch (e) {\n                console.error(\"Error fetching events:\", e);\n                failureCallback(e);\n            }\n        },\n        eventClick: (info) => {\n            eventClickCallback(info)\n        },\n        // 点击空白处触发\n        dateClick: function (info) {\n            dateClickCallback(info)\n        },\n        eventDidMount: function (info) {\n            //每一个事件都会触发\n            eventDidMountCallback(info)\n        },\n        select: function (info) {\n            // 转换为中国时间\n            let startTime = new Date(info.start.setHours(info.start.getHours() + 8));\n            let endTime = new Date(info.end.setHours(info.end.getHours() + 8));\n            let newColor = getRandomColor()\n            this.setOption('eventColor', newColor);\n            // 创建新的事件对象，并设置颜色\n            let event = {\n                title: '新事件', // 事件标题\n                start: startTime, // 开始时间\n                end: endTime, // 结束时间\n                backgroundColor: newColor, // 设置背景颜色\n                borderColor: newColor, // 设置边框颜色，可选\n                textColor: 'white', // 设置文字颜色，可选\n            };\n            //临时事件到页面\n            selEventCallback(event);\n            return false;\n        },\n        eventOrder: \"title,start\",\n        eventAdd: function (info) {\n            eventAddCallback(info)\n        },\n        eventChange: function (info) {\n            console.log(\"1、eventChange\", info)\n            eventChangeCallback(info)\n        },\n        eventContent: (arg, createElement) => {\n            const startTime = arg.event.start;\n            const endTime = arg.event.end;\n            //获取背景颜色\n            const color = arg.backgroundColor;\n            // 创建一个容器元素来包裹事件内容\n            const containerEl = document.createElement('div');\n            containerEl.style.height = '100%';\n            containerEl.style.overflow = 'hidden'; // 防止内容溢出\n            containerEl.innerHTML = `\n            <div style='background-color:${color};height:100%;max-width:300px;overflow:hidden;'>\n            <div class='bg-gray-800  text-md font-bold px-2' style=\"box-sizing:border-box;max-width:300px;\">\n            ⏰${formatTime(startTime)} - ${formatTime(endTime)}${arg.event.title} #${arg.event.id}\n            </div>\n                <div style='padding:6px;box-sizing:border-box;'>\n                    <div class='text-xl font-bold'>👩🏻‍🏫${arg.event.extendedProps.coach?arg.event.extendedProps.coach.realname:'未知'}</div>\n                    <div class='flex justify-between items-center overflow-hidden'>\n                        <div>${arg.event.title ? arg.event.title : \"未知\"}</div>\n                        <div>${arg.event.extendedProps.course? arg.event.extendedProps.course.venue.name : \"未知\"}</div>\n                    </div>\n                    <div class='flex justify-between items-center overflow-hidden'>\n                        <div>约${arg.event.extendedProps.schedule ? arg.event.extendedProps.schedule : \"未知\"}</div>\n                        <div>签${arg.event.extendedProps.sign ? arg.event.extendedProps.sign : \"未知\"}</div>\n                    </div>\n                </div>\n    </div>\n    `;\n            eventContentCallback(arg, createElement, containerEl)\n            return {domNodes: [containerEl]};\n        },\n        eventMouseEnter: function (info) {\n            const eventEl = info.el;\n            eventMouseEnterCallback(info)\n            const heartbeatStyle = {\n                animation: 'heartbeat .1s infinite alternate',\n            };\n            Object.assign(eventEl.style, heartbeatStyle);\n        },\n        eventMouseLeave: function (info) {\n            eventMouseLeaveCallback(info)\n\n            const eventEl = info.el;\n            eventDropCallback(info)\n            eventEl.style.removeProperty('animation');\n        },\n        eventDrop: function (info) {\n        },\n        editable: true,\n        dayMaxEventRows:2,\n        // 设置中国时区【坑】\n        timeZone: 'local',\n        dayHeaderContent: function (args) {\n            //设置背景色，设置字体大小，使用h函数\n            return h('div', {\n                style: {\n                    width: '100%',\n                    lineHeight: '50px',\n                    fontSize: '18px',\n                    height: '50px',\n                    color:'#1E90FFFF'\n                }\n            }, args.text);\n        }\n    }\n}","<template>\n  <div>\n    <FullCalendar :options=\"calendarOptions\" ref=\"fullCalendarRef\" />\n    <!-- 这里是修改过程 -->\n    <a-drawer\n        :zIndex=\"100\"\n        width=\"800\"\n        placement=\"right\"\n        v-model:visible=\"openDrawer\"\n        @close=\"close\"\n        title=\"课程排期\"\n    >\n      <a-form ref=\"formRef\" :model=\"scheduleState\">\n        <a-form-item\n            label=\"开始时间\"\n            name=\"start_time\"\n            :rules=\"[{ required: true,message:'请选择时间' }]\"\n        >\n          <a-input v-model:value=\"scheduleState.start_time\" disabled></a-input>\n        </a-form-item>\n        <a-form-item\n            label=\"结束时间\"\n            name=\"end_time\"\n            :rules=\"[{ required: true }]\"\n        >\n          <a-input v-model:value=\"scheduleState.end_time\" disabled></a-input>\n        </a-form-item>\n        <a-form-item\n            label=\"排期颜色\"\n            name=\"color\"\n            :rules=\"[{ required: true ,message:'请选择颜色'}]\"\n        >\n          <picker v-model=\"scheduleState.color\"/>\n        </a-form-item>\n        <a-form-item\n            label=\"选择课程\"\n            name=\"course_id\"\n            :rules=\"[{ required: true,message:'请选择课程' }]\"\n        >\n          <Groupcourse\n              v-model:course_id=\"scheduleState.course_id\"\n              v-model:course_name=\"scheduleState.course_name\"\n              v-model:venue_name=\"scheduleState.venue_name\"\n          />\n        </a-form-item>\n        <a-form-item\n            label=\"教练\"\n            name=\"coach_id\"\n            :rules=\"[{ required: true ,message:'教练'}]\"\n        >\n          <EmployeeSel :disabled=\"true\" v-model=\"scheduleState.coach_id\"/>\n        </a-form-item>\n        <a-form-item>\n          <a-space>\n            <a-button type=\"primary\" @click=\"onUpdate\">提交</a-button>\n            <slot :currentEvent=\"currentEvent\">\n              <a-button type=\"primary\">关闭</a-button>\n            </slot>\n          </a-space>\n        </a-form-item>\n      </a-form>\n    </a-drawer>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport dayjs from \"dayjs\";\nimport Groupcourse from \"@/components/groupcourse/index.vue\";\nimport FullCalendar from \"@fullcalendar/vue3\";\nimport useOpts from \"./options\";\n// import useRulesStore from \"@/store/useRulesStore.ts\";\nimport { toReactive } from \"@vueuse/core\";\nimport Api from \"@/api\"\nimport EmployeeSel from \"@/components/employee-sel/index.vue\";\n\n// const rulesStore = useRulesStore();\nconst instance = getCurrentInstance();\nconst { proxy } = instance;\nconst fullCalendarRef = ref();\nconst activeKey = ref([\"1\"]);\nconst props = defineProps({\n  getSelData: {\n    type: Function,\n    default: () => {},\n  },\n  getDropData: {\n    type: Function,\n    default: () => {},\n  },\n});\n// 国际化用\n// UTC格式化成本地时间\nconst formatLocalTime = (\n    timeStr: string,\n    formatter = \"YYYY-MM-DD HH:mm:ss\"\n) => {\n  if (!(timeStr && dayjs(timeStr))) return \"\";\n  // 使用 Day.js 的 parse 函数将 FullCalendar 时间解析为 Day.js 对象\n  const parsedTime = dayjs(timeStr);\n  //显示中国时间减去8小时\n  const localTime = parsedTime.subtract(8, \"hours\");\n\n  // 将 Day.js 对象格式化为所需的格式，例如 'YYYY-MM-DD HH:mm:ss'\n  const formattedTime = localTime.format(\"YYYY-MM-DD HH:mm:ss\");\n\n  return formattedTime;\n};\n\n//当前需要显示的事件\nconst currentEvent = ref({\n  id: null,\n  title: \"\",\n  coach:{},\n  venue:{},\n  venue_id:null,\n  description: \"\",\n  backgroundColor: \"\",\n  schedule: \"\",\n  sign: \"\",\n  users: [],\n  start: \"\",\n  end: \"\",\n});\nconst openDrawer = ref(false);\n// #region 功能函数\nconst evClickCbk = (info) => {\n  // console.log(\"evClickCbk\",info.event)\n  if (!info.event.id) {\n    console.log(\"evClickCbk==>临时事件\", info);\n    return;\n  }\n  openDrawer.value = true;\n  currentEvent.value = info.event;\n};\nconst dtClickCbk = (info) => {\n  // console.log(\"子组件：空白处被点击\", info);\n};\nconst mountedCbk = (info) => {\n  const eventEl = info.el;\n  eventEl.style.maxWidth=\"300px\";\n  // 添加平滑的悬停动画效果\n  eventEl.style.transition = \"all 0.3s ease-out\"; // 修正拼写错误并优化时间\n\n  // 初始状态\n  eventEl.style.transform = \"scale(1)\";\n  eventEl.style.boxShadow = \"0 2px 5px rgba(0, 0, 0, 0.1)\";\n  eventEl.style.margin=\"10px\"\n\n  // 鼠标悬停效果\n  eventEl.addEventListener('mouseenter', () => {\n    eventEl.style.boxShadow = \"0 5px 15px rgba(0, 0, 0, 0.5)\";\n    eventEl.style.transform = \"scale(0.98)\";\n    eventEl.style.zIndex = \"100\"; // 确保悬停元素在上层\n  });\n\n  // 鼠标离开效果\n  eventEl.addEventListener('mouseleave', () => {\n    eventEl.style.boxShadow = \"0 2px 5px rgba(0, 0, 0, 0.1)\";\n    eventEl.style.transform = \"scale(1)\";\n    eventEl.style.zIndex = \"\";\n  });\n\n};\nconst selCbk = (event) => {\n  // console.log(\"子组件：选择事件选择\", event);\n  let tmpEvent = {\n    start: formatLocalTime(event.start),\n    end: formatLocalTime(event.end),\n    title: event.title,\n  };\n  addEvent(tmpEvent);\n  props.getSelData(event);\n};\nconst evtAddCbk = (info) => {\n  // console.log(\"子组件：添加事件被触发\", info);\n};\nconst evtCbk = async (info) => {\n  console.log(\"子组件：事件被触发,startStr,endStr\", info.event.startStr,info.event.endStr);\n  await Api.scheduleController.change({id:info.event.id,start_time:info.event.startStr,end_time:info.event.endStr})\n};\nconst evtContentCbk = (arg, createElement, containerEl) => {\n  // console.log(\"子组件：自定义样式\");\n};\nconst evtMouseEnterCbk = (info) => {\n  const eventEl = info.el;\n};\nconst evtMouseLeaveCbk = (info) => {\n  const eventEl = info.el;\n};\nconst eventDropCbk = (info) => {\n  console.log(\"子组件：拖拽事件时\");\n  let event = info.event;\n  let newInfo = {\n    id: event.id,\n    start: event.start,\n    end: event.end,\n  };\n  props.getDropData(newInfo);\n};\nconst calendarOptions = useOpts(\n    evClickCbk,\n    dtClickCbk,\n    mountedCbk,\n    selCbk,\n    evtAddCbk,\n    evtCbk,\n    evtContentCbk,\n    evtMouseEnterCbk,\n    evtMouseLeaveCbk,\n    eventDropCbk\n);\n//获取所有事件\nconst getEvents = () => {\n  return proxy.$refs[\"fullCalendar\"].getApi().view.calendar.getEvents();\n};\n// 通过ID获取事件\nconst getEventById = (id) => {\n  return proxy.$refs[\"fullCalendar\"].getApi().view.calendar.getEventById(id);\n};\n// 添加事件\nconst addEvent = (event) => {\n  console.log(2, \"添加事件到页面--未提交后台\", event);\n  // const calendarApi = fullCalendarRef.value.getApi();\n  // calendarApi.addEvent(event);\n  // // 检查是否已存在相同ID的事件\n  // const existingEvent = calendarApi.getEventById(event.id);\n  // if (!existingEvent) {\n  //   calendarApi.addEvent({\n  //     ...event,\n  //     id: event.id || `temp_${Date.now()}` // 确保有唯一ID\n  //   });\n  // } else {\n  //   console.warn(\"Event already exists:\", event.id);\n  // }\n};\n\n// 通过id删除事件\nconst removeEventById = (event) => {\n  let calendarApi = proxy.$refs[\"fullCalendar\"].getApi();\n  let calendarFunc = calendarApi.view.calendar;\n  let getEvents = calendarFunc.getEvents(); //获取数据\n  if (getEvents && getEvents.length > 0) {\n    //循环删除数据（通过ID）\n    getEvents.map((item) => {\n      if (item.id === event.id) {\n        calendarFunc.getEventById(item.id).remove();\n      }\n    });\n  }\n};\n\n// 删除所有事件\nconst removeAllEvents = () => {\n  let calendarApi = proxy.$refs[\"fullCalendar\"].getApi();\n  let calendarFunc = calendarApi.view.calendar;\n  let getEvents = calendarFunc.getEvents(); //获取数据\n  getEvents.map((item) => {\n    item.remove();\n  });\n};\n\nconst refresh = () => {\n  console.log(\"refresh\");\n  const calendarApi = fullCalendarRef.value.getApi();\n  calendarApi.removeAllEvents();\n  calendarApi.refetchEvents();\n};\n\n// 对外暴露方法refresh\ndefineExpose({\n  refresh,\n  openDrawer,\n  eventDropCbk,\n});\n// #endregion\n// ==折叠修改\nlet scheduleState = ref({\n  id: null,\n  start_time: \"\",\n  end_time: \"\",\n  color: \"\",\n  course_id:null,\n  user_id: null,\n  course_name:\"\",\n  venue:{},\n  venue_name:\"\"\n});\n\nwatch(openDrawer, async (newVal) => {\n  if (newVal) {\n    //关闭时，清空折叠面板中的数据\n   let data = await Api.scheduleController.show({id:currentEvent.value.id});\n    scheduleState.value={\n      ...data,\n      course_id:data.course_id,\n      course_name:data.course.title,\n      venue_name:data.course.venue.name,\n    }\n    // console.log(\"scheduleState\",scheduleState.value)\n  } else {\n    scheduleState.value = ref({\n      id: null,\n      start_time: \"\",\n      end_time: \"\",\n      color: \"\",\n      course_id:null,\n      user_id: null,\n      course_name:\"\",\n      venue:{},\n      venue_name:\"\"\n    });\n  }\n});\nconst onUpdate = async () => {\n  await Api.scheduleController.update({id:scheduleState.value.id},scheduleState.value);\n  openDrawer.value = false;\n  refresh();\n};\n\nconst close = () => {\n  //重置数据scheduleState\n  scheduleState.value = ref({\n    id: null,\n    start_time: \"\",\n    end_time: \"\",\n    color: \"\",\n    course_id:null,\n    user_id: null,\n    course_name:\"\",\n    venue:{},\n    venue_name:\"\"\n  });\n  refresh();\n};\n\n</script>\n\n<style>\n@keyframes heartbeat {\n  0% {\n    /*心跳放大*/\n    opacity: 0.9;\n    transform: rotate(0.2deg);\n  }\n\n  100% {\n    /*心跳缩小*/\n    opacity: 1;\n    transform: rotate(-0.2deg);\n  }\n}\n.fc-event {\n  margin-bottom: 2px !important; /* 添加事件间的小间隔 */\n  box-sizing: border-box !important;\n}\n\n.fc-event-main {\n  overflow: hidden !important;\n}\n</style>\n","<template>\n  <div>\n    <a-row>\n      <a-col :span=\"24\">\n        <Hlgfullcalendar\n            ref=\"hlfullcalendarRef\"\n            :getSelData=\"getSelData\"\n            v-slot=\"{ currentEvent }\"\n            :getDropData=\"getDropData\"\n        >\n          <a-popconfirm\n              title=\"确认删除吗？\"\n              ok-text=\"是\"\n              cancel-text=\"否\"\n              @confirm=\"delEvt(currentEvent)\"\n          >\n            <a-button type=\"primary\" danger>删除</a-button>\n          </a-popconfirm>\n        </Hlgfullcalendar>\n      </a-col>\n    </a-row>\n\n    <!-- 这里是新增过程 -->\n    <a-drawer\n        :zIndex=\"100\"\n        width=\"800\"\n        placement=\"right\"\n        v-model:visible=\"showDrawer\"\n        @close=\"close\"\n        title=\"课程排期\"\n    >\n      <a-form ref=\"formRef\" :model=\"scheduleState\">\n        <a-form-item\n            label=\"开始时间\"\n            name=\"start_time\"\n            :rules=\"[{ required: true,message:'请选择时间' }]\"\n        >\n          <a-input v-model:value=\"scheduleState.start_time\" disabled></a-input>\n        </a-form-item>\n        <a-form-item\n            label=\"结束时间\"\n            name=\"end_time\"\n            :rules=\"[{ required: true }]\"\n        >\n          <a-input v-model:value=\"scheduleState.end_time\" disabled></a-input>\n        </a-form-item>\n        <a-form-item\n            label=\"排期颜色\"\n            name=\"color\"\n            :rules=\"[{ required: true ,message:'请选择颜色'}]\"\n        >\n          <picker v-model=\"scheduleState.color\"/>\n        </a-form-item>\n        <a-form-item\n            label=\"课程\"\n            name=\"course_id\"\n            :rules=\"[{ required: true,message:'请选择课程' }]\"\n        >\n          <Groupcourse\n              v-model:course_id=\"scheduleState.course_id\"\n              v-model:course_name=\"scheduleState.course_name\"\n              v-model:venue_name=\"scheduleState.venue_name\"\n          />\n        </a-form-item>\n        <a-form-item>\n          <a-button type=\"primary\" @click=\"onSubmit\">提交</a-button>\n        </a-form-item>\n      </a-form>\n    </a-drawer>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {Modal} from \"ant-design-vue\";\nimport {ExclamationCircleOutlined} from \"@ant-design/icons-vue\";\nimport {createVNode} from \"vue\";\nimport Groupcourse from \"@/components/groupcourse/index.vue\";\nimport dayjs from \"dayjs\";\nimport Hlgfullcalendar from \"@/components/hlgfullcalendar/index.vue\";\nimport EmployeeSel from \"@/components/employee-sel/index.vue\";\nimport Api from \"@/api\";\n\nconst showDrawer = ref(false);\n\nconst formRef = ref();\nconst scheduleState = reactive({\n  id: null,\n  start_time: \"\",\n  end_time: \"\",\n  color: \"\",\n  title:\"\",\n  state:\"\",\n  course_name: \"\",\n  coach_id: null,\n  venue_name:\"\"\n});\nconst hlfullcalendarRef = ref(null);\n\n//定义一个函数，格式化为时间字符串，精确到分钟，同时采用东八区，中国时间\nconst formmatDateTimeStr = (data) => {\n  data = new Date(data.getTime());\n  return data.toISOString().slice(0, 16).replace(\"T\", \" \");\n};\n\nconst getSelData = (data) => {\n  // console.log(\"getSelData\", data)\n  if (data != null) {\n    showDrawer.value = true;\n    scheduleState.start_time = formmatDateTimeStr(data.start);\n    scheduleState.end_time = formmatDateTimeStr(data.end);\n    scheduleState.color = data.backgroundColor;\n  }\n};\nconst getDropData = (data) => {\n  console.log(\"getDropData\", data)\n  return ;\n  /*Modal.confirm({\n    title: \"确认修改课程时间？\",\n    centered: true,\n    width: 600,\n    maskClosable: false,\n    icon: createVNode(ExclamationCircleOutlined),\n    content: h(\n        \"div\",\n        {\n          style: \"color:red;\",\n        },\n        h(\n            \"span\",\n            dayjs(data.start).format(\"YYYY-MM-DD HH:mm:ss\") +\n            \"至\" +\n            dayjs(data.end).format(\"YYYY-MM-DD HH:mm:ss\")\n        )\n    ),\n    okText: \"保存\",\n    cancelText: \"取消\",\n    onOk: async () => {\n      await Api.scheduleController.change({id:data.id,start_time:data.start,end_time:data.end})\n      console.log(\"保存\", data);\n      hlfullcalendarRef.value.refresh(); //刷新表格，从新获取网络请求\n    },\n    onCancel() {\n      hlfullcalendarRef.value.refresh(); //刷新表格，从新获取网络请求\n    },\n  });*/\n};\nconst onSubmit = async () => {\n  try {\n    formRef.value.clearValidate();\n    await Api.scheduleController.store(scheduleState);\n    showDrawer.value = false;\n    hlfullcalendarRef.value.refresh(); //刷新表格，从新获取网络请求\n  } catch (error) {\n    console.log(error);\n    formRef.value.validate();\n  }\n};\nconst delEvt = async (currentEvent) => {\n  hlfullcalendarRef.value.openDrawer = false;\n  await Api.scheduleController.destroy({id: currentEvent.id});\n  await hlfullcalendarRef.value.refresh(); //刷新表格，从新获取网络请求\n};\nwatch(showDrawer, async (newVal) => {\n  if (newVal==false) {\n    scheduleState.value = ref({\n      id: null,\n      start_time: \"\",\n      end_time: \"\",\n      color: \"\",\n      course_id:null,\n      user_id: null,\n      course_name:\"\",\n      venue:{},\n      venue_name:\"\"\n    });\n  }\n});\n\nconst close = () => {\n  //重置数据scheduleState\n  scheduleState.id = null;\n  scheduleState.start_time = \"\";\n  scheduleState.end_time = \"\";\n  scheduleState.color = \"\";\n  scheduleState.venue_name = \"\";\n  scheduleState.title = \"\";\n  scheduleState.status = 1;\n  hlfullcalendarRef.value.refresh();\n};\n\n\n</script>\n\n<style lang=\"scss\" scoped></style>\n"],"names":["dataSource","ref","props","__props","columns","title","onMounted","fillData","data","Api","item","openModal","emit","__emit","selectOne","row","colorPalette","getRandomColor","formatTime","timeString","time","hours","minutes","useOpts","eventClickCallback","dateClickCallback","eventDidMountCallback","selEventCallback","eventAddCallback","eventChangeCallback","eventContentCallback","eventMouseEnterCallback","eventMouseLeaveCallback","eventDropCallback","dayGridPlugin","interactionPlugin","timeGridPlugin","momentPlugin","listPlugin","zhLocale","fetchInfo","successCallback","failureCallback","req","e","info","startTime","endTime","newColor","arg","createElement","color","containerEl","eventEl","heartbeatStyle","args","h","getCurrentInstance","fullCalendarRef","formatLocalTime","timeStr","formatter","dayjs","currentEvent","openDrawer","evClickCbk","dtClickCbk","mountedCbk","selCbk","event","tmpEvent","addEvent","evtAddCbk","evtCbk","evtContentCbk","evtMouseEnterCbk","evtMouseLeaveCbk","eventDropCbk","newInfo","calendarOptions","refresh","calendarApi","__expose","scheduleState","watch","newVal","onUpdate","close","showDrawer","formRef","reactive","hlfullcalendarRef","formmatDateTimeStr","getSelData","getDropData","onSubmit","error","delEvt"],"mappings":"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"}