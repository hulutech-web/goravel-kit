{"version":3,"file":"index.806bbb27.1755837058343.js","sources":["../../src/composible/usePermission.ts","../../src/pages/system/auth/permission/index.vue"],"sourcesContent":["import XEUtils from \"xe-utils\";\nimport {VxeGridProps} from \"vxe-table\";\nimport {request} from \"@/utils/request\";\nimport Api from \"@/api\"\nimport {destroy} from \"@/api/permissionController\";\nclass RowVO {\n}\n\nexport default () => {\n    // 方法\n\n    // 表单配置\n    const serveApiUrl = import.meta.env.VITE_API_URL;\n    const gridOptions = reactive<VxeGridProps<RowVO>>({\n        border: \"full\",\n        size: \"small\",\n        showHeaderOverflow: true,\n        showOverflow: true,\n        keepSource: true,\n        autoResize: true,\n        expandConfig: {\n            trigger: \"row\",\n            showIcon: true,\n            expandRowKeys: [1, 2],\n            iconOpen: \"vxe-icon--caret-bottom\",\n            iconClose: \"vxe-icon--caret-top\",\n        },\n        formConfig: {\n            titleWidth: 120,\n            titleAlign: \"right\",\n            items: [\n                {\n                    field: \"name\",\n                    title: \"名称\",\n                    span: 6,\n                    itemRender: {\n                        name: \"$input\",\n                        props: {placeholder: \"请输入名称\"},\n                    },\n                },\n                {\n                    field: \"code\",\n                    title: \"编码\",\n                    span: 6,\n                    itemRender: {\n                        name: \"$input\",\n                        props: {placeholder: \"请输入编码\"},\n                    },\n                },\n                {\n                    span: 8,\n                    align: \"left\",\n                    collapseNode: true,\n                    itemRender: {\n                        name: \"$buttons\",\n                        children: [\n                            {\n                                props: {\n                                    type: \"submit\",\n                                    content: \"搜索\",\n                                    status: \"primary\",\n                                },\n                            },\n                            {props: {type: \"reset\", content: \"重置\"}},\n                        ],\n                    },\n                },\n            ],\n        },\n        stripe: true,\n        id: \"full_edit_9999\",\n        rowConfig: {\n            keyField: \"#\",\n            isHover: true,\n            useKey: true,\n        },\n        columnConfig: {\n            resizable: true,\n        },\n        customConfig: {\n            storage: true,\n            checkMethod({column}) {\n                if ([\"name\", \"no\"].includes(column.field)) {\n                    return false;\n                }\n                return true;\n            },\n        },\n        printConfig: {\n            columns: [{field: \"name\"}],\n        },\n        sortConfig: {\n            trigger: \"cell\",\n            remote: true,\n        },\n        filterConfig: {\n            remote: true,\n        },\n        pagerConfig: {\n            enabled: true,\n            pageSize: 10,\n            pageSizes: [5, 10, 15, 20, 50, 100, 200, 500, 1000],\n        },\n\n        toolbarConfig: {\n            buttons: [\n                {code: \"insert_actived\", name: \"快捷新增\", status: \"primary\"},\n                {code: \"delete\", name: \"直接删除\", status: \"danger\"},\n                {code: \"mark_cancel\", name: \"删除/取消\"},\n                {code: \"save\", name: \"保存\", status: \"success\"},\n            ],\n            refresh: true, // 显示刷新按钮\n            import: false, // 显示导入按钮\n            export: true, // 显示导出按钮\n            print: true, // 显示打印按钮\n            zoom: true, // 显示全屏按钮\n            custom: true, // 显示自定义列按钮\n        },\n        proxyConfig: {\n            seq: true, // 启用动态序号代理，每一页的序号会根据当前页数变化\n            sort: true, // 启用排序代理，当点击排序时会自动触发 query 行为\n            filter: true, // 启用筛选代理，当点击筛选时会自动触发 query 行为\n            form: true, // 启用表单代理，当点击表单提交按钮时会自动触发 reload 行为\n            props: {\n                // 对应响应结果 Promise<{ result: [], page: { total: 100 } }>\n                result: \"data\", // 配置响应结果列表字段\n                total: \"total\", // 配置响应结果总页数字段\n            },\n            // 只接收Promise，具体实现自由发挥\n            ajax: {\n                // 当点击工具栏查询按钮或者手动提交指令 query或reload 时会被触发\n                query: async ({page, sorts, filters, form}) => {\n                    //通过当前对象为选框添加选项\n                    const queryParams: any = Object.assign({}, form);\n                    // 处理排序条件\n                    const firstSort = sorts[0];\n                    if (firstSort) {\n                        queryParams.sort = firstSort.field;\n                        queryParams.order = firstSort.order;\n                    }\n                    // 处理筛选条件\n                    filters.forEach(({field, values}) => {\n                        queryParams[field] = values.join(\",\");\n                    });\n                    return request({\n                        url: `/api/admin/permission?pageSize=${page.pageSize}&currentPage=${page.currentPage\n                        }&${XEUtils.serialize(queryParams)}`,\n                        method: \"GET\",\n                    });\n                },\n                delete: ({body}) => {\n                    const ids = body.removeRecords.map((item: any) => item.id)\n                    return destroy(ids)\n                },\n                save: ({body}) => {\n                    const {insertRecords, updateRecords} = body\n                    const promises = []\n\n                    if (insertRecords.length > 0) {\n                        insertRecords.forEach(record => {\n                            promises.push(Api.permissionController.store(record))\n                        })\n                    }\n\n                    if (updateRecords.length > 0) {\n                        updateRecords.forEach(record => {\n                            promises.push(Api.permissionController.update({id: record.id}, record))\n                        })\n                    }\n\n                    return Promise.all(promises)\n                }\n            },\n        },\n        columns: [\n            {field: \"id\", title: \"序号\", width: 100},\n            // 配置日期选择器\n            {\n                field: \"name\",\n                title: \"名称\",\n                sortable: true,\n                editRender: {\n                    name: \"AInput\",\n                    props: {\n                        placeholder: \"请输入名称\",\n                    },\n                },\n            },\n            {\n                field: \"code\",\n                title: \"编码\",\n                //当为in是显示登录，out时显示退出\n                sortable: true,\n                editRender: {\n                    name: \"AInput\",\n                    props: {\n                        placeholder: \"请输入编码\",\n                    },\n                },\n            },\n            {\n                field: \"type\",\n                title: \"类型\",\n                //1-菜单，2-按钮，3-API\n                sortable: true,\n                editRender: {\n                    name: \"ASelect\",\n                    props: {\n                        placeholder: \"请选择\",\n                    },\n                    options: [\n                        {\n                            value: 1,\n                            label: \"菜单\",\n                        },\n                        {\n                            value: 2,\n                            label: \"按钮\",\n                        },\n                        {\n                            value: 3,\n                            label: \"API\",\n                        },\n                    ],\n                    defaultValue:1\n                },\n            },\n            {\n                field: \"menu_id\",\n                title: \"菜单ID\",\n                sortable: true,\n                editRender: {\n                    name: \"AInputNumber\",\n                    props: {\n                        placeholder: \"请输入ID\",\n                    },\n                },\n            },\n        ],\n        importConfig: {},\n        exportConfig: {},\n        checkboxConfig: {\n            labelField: \"ID\",\n            checkStrictly: true,\n        },\n        editRules: {\n            name: [\n                {required: true, message: \"必填\"},\n                {min: 3, max: 50, message: \"名称长度在 3 到 50 个字符\"},\n            ],\n            no: [{required: true, message: \"必填\"}],\n        },\n        editConfig: {\n            trigger: \"click\",\n            mode: \"row\",\n            showStatus: true,\n            showUpdateStatus: true,\n            showInsertStatus: true,\n            autoClear: true,\n        },\n    });\n\n    return {\n        gridOptions,\n    };\n};\n","<script lang=\"ts\" setup>\nimport {ref} from 'vue'\nimport { VxeGridListeners} from 'vxe-table'\nimport usePermission from \"@/composible/usePermission\";\n\nconst router = useRouter();\nconst {gridOptions} = usePermission()\nconst xGrid = ref()\nconst serveApiUrl = import.meta.env.VITE_API_URL;\n\n// 编辑用户\nconst editCourse = (row: any) => {\n  const grid = xGrid.value\n  grid.setEditRow(row)\n}\n\n\n\n\nconst gridEvent: VxeGridListeners = {\n  proxyQuery() {\n    //设置column为cover的列，将其数据设置为数组，数组形式如下：[{name:'xx',url:'xx'}...]\n  },\n}\n\n\nconst fileRef = ref(null)\nconst selectFile = () => {\n  fileRef.value.showModal()\n  //通过xGrid获取到row的列，并且把cover数据改为\n}\n</script>\n\n<template>\n  <div class=\"demo-page-wrapper\">\n    <vxe-grid\n        ref=\"xGrid\"\n        v-bind=\"gridOptions\"\n        v-on=\"gridEvent\"\n    >\n      <template #action=\"{ row }\">\n        <a-space>\n          <a-popconfirm\n              title=\"确认删除吗？\"\n              ok-text=\"是\"\n              cancel-text=\"否\"\n              @confirm=\"delCourse(row)\"\n          >\n            <a-button size=\"small\" type=\"primary\" danger>删除</a-button>\n          </a-popconfirm>\n          <a-button type=\"primary\" size=\"small\" @click=\"toChapter(row)\">章节</a-button>\n        </a-space>\n      </template>\n    </vxe-grid>\n  </div>\n</template>\n\n<style scoped lang=\"less\">\n.demo-page-wrapper {\n  padding: 20px;\n}\n</style>"],"names":["usePermission","reactive","column","page","sorts","filters","form","queryParams","firstSort","field","values","request","XEUtils","body","ids","item","destroy","insertRecords","updateRecords","promises","record","Api","useRouter","gridOptions","xGrid","ref","gridEvent"],"mappings":"soFAQA,MAAAA,EAAe,KA8PJ,CACH,YA1PgBC,EAA8B,CAC9C,OAAQ,OACR,KAAM,QACN,mBAAoB,GACpB,aAAc,GACd,WAAY,GACZ,WAAY,GACZ,aAAc,CACV,QAAS,MACT,SAAU,GACV,cAAe,CAAC,EAAG,CAAC,EACpB,SAAU,yBACV,UAAW,qBACf,EACA,WAAY,CACR,WAAY,IACZ,WAAY,QACZ,MAAO,CACH,CACI,MAAO,OACP,MAAO,KACP,KAAM,EACN,WAAY,CACR,KAAM,SACN,MAAO,CAAC,YAAa,OAAO,CAChC,CACJ,EACA,CACI,MAAO,OACP,MAAO,KACP,KAAM,EACN,WAAY,CACR,KAAM,SACN,MAAO,CAAC,YAAa,OAAO,CAChC,CACJ,EACA,CACI,KAAM,EACN,MAAO,OACP,aAAc,GACd,WAAY,CACR,KAAM,WACN,SAAU,CACN,CACI,MAAO,CACH,KAAM,SACN,QAAS,KACT,OAAQ,SACZ,CACJ,EACA,CAAC,MAAO,CAAC,KAAM,QAAS,QAAS,KAAK,CAC1C,CACJ,CACJ,CACJ,CACJ,EACA,OAAQ,GACR,GAAI,iBACJ,UAAW,CACP,SAAU,IACV,QAAS,GACT,OAAQ,EACZ,EACA,aAAc,CACV,UAAW,EACf,EACA,aAAc,CACV,QAAS,GACT,YAAY,CAAC,OAAAC,GAAS,CAClB,MAAI,EAAC,OAAQ,IAAI,EAAE,SAASA,EAAO,KAAK,CAI5C,CACJ,EACA,YAAa,CACT,QAAS,CAAC,CAAC,MAAO,OAAO,CAC7B,EACA,WAAY,CACR,QAAS,OACT,OAAQ,EACZ,EACA,aAAc,CACV,OAAQ,EACZ,EACA,YAAa,CACT,QAAS,GACT,SAAU,GACV,UAAW,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,CACtD,EAEA,cAAe,CACX,QAAS,CACL,CAAC,KAAM,iBAAkB,KAAM,OAAQ,OAAQ,SAAS,EACxD,CAAC,KAAM,SAAU,KAAM,OAAQ,OAAQ,QAAQ,EAC/C,CAAC,KAAM,cAAe,KAAM,OAAO,EACnC,CAAC,KAAM,OAAQ,KAAM,KAAM,OAAQ,SAAS,CAChD,EACA,QAAS,GACT,OAAQ,GACR,OAAQ,GACR,MAAO,GACP,KAAM,GACN,OAAQ,EACZ,EACA,YAAa,CACT,IAAK,GACL,KAAM,GACN,OAAQ,GACR,KAAM,GACN,MAAO,CAEH,OAAQ,OACR,MAAO,OACX,EAEA,KAAM,CAEF,MAAO,MAAO,CAAC,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,KAAAC,KAAU,CAE3C,MAAMC,EAAmB,OAAO,OAAO,GAAID,CAAI,EAEzCE,EAAYJ,EAAM,CAAC,EACzB,OAAII,IACAD,EAAY,KAAOC,EAAU,MAC7BD,EAAY,MAAQC,EAAU,OAGlCH,EAAQ,QAAQ,CAAC,CAAC,MAAAI,EAAO,OAAAC,KAAY,CACjCH,EAAYE,CAAK,EAAIC,EAAO,KAAK,GAAG,CAAA,CACvC,EACMC,EAAQ,CACX,IAAK,kCAAkCR,EAAK,QAAQ,gBAAgBA,EAAK,WACzE,IAAIS,EAAQ,UAAUL,CAAW,CAAC,GAClC,OAAQ,KAAA,CACX,CACL,EACA,OAAQ,CAAC,CAAC,KAAAM,KAAU,CAChB,MAAMC,EAAMD,EAAK,cAAc,IAAKE,GAAcA,EAAK,EAAE,EACzD,OAAOC,EAAQF,CAAG,CACtB,EACA,KAAM,CAAC,CAAC,KAAAD,KAAU,CACR,KAAA,CAAC,cAAAI,EAAe,cAAAC,CAAiB,EAAAL,EACjCM,EAAW,CAAA,EAEb,OAAAF,EAAc,OAAS,GACvBA,EAAc,QAAkBG,GAAA,CAC5BD,EAAS,KAAKE,EAAI,qBAAqB,MAAMD,CAAM,CAAC,CAAA,CACvD,EAGDF,EAAc,OAAS,GACvBA,EAAc,QAAkBE,GAAA,CACnBD,EAAA,KAAKE,EAAI,qBAAqB,OAAO,CAAC,GAAID,EAAO,IAAKA,CAAM,CAAC,CAAA,CACzE,EAGE,QAAQ,IAAID,CAAQ,CAC/B,CACJ,CACJ,EACA,QAAS,CACL,CAAC,MAAO,KAAM,MAAO,KAAM,MAAO,GAAG,EAErC,CACI,MAAO,OACP,MAAO,KACP,SAAU,GACV,WAAY,CACR,KAAM,SACN,MAAO,CACH,YAAa,OACjB,CACJ,CACJ,EACA,CACI,MAAO,OACP,MAAO,KAEP,SAAU,GACV,WAAY,CACR,KAAM,SACN,MAAO,CACH,YAAa,OACjB,CACJ,CACJ,EACA,CACI,MAAO,OACP,MAAO,KAEP,SAAU,GACV,WAAY,CACR,KAAM,UACN,MAAO,CACH,YAAa,KACjB,EACA,QAAS,CACL,CACI,MAAO,EACP,MAAO,IACX,EACA,CACI,MAAO,EACP,MAAO,IACX,EACA,CACI,MAAO,EACP,MAAO,KACX,CACJ,EACA,aAAa,CACjB,CACJ,EACA,CACI,MAAO,UACP,MAAO,OACP,SAAU,GACV,WAAY,CACR,KAAM,eACN,MAAO,CACH,YAAa,OACjB,CACJ,CACJ,CACJ,EACA,aAAc,CAAC,EACf,aAAc,CAAC,EACf,eAAgB,CACZ,WAAY,KACZ,cAAe,EACnB,EACA,UAAW,CACP,KAAM,CACF,CAAC,SAAU,GAAM,QAAS,IAAI,EAC9B,CAAC,IAAK,EAAG,IAAK,GAAI,QAAS,kBAAkB,CACjD,EACA,GAAI,CAAC,CAAC,SAAU,GAAM,QAAS,KAAK,CACxC,EACA,WAAY,CACR,QAAS,QACT,KAAM,MACN,WAAY,GACZ,iBAAkB,GAClB,iBAAkB,GAClB,UAAW,EACf,CAAA,CACH,CAGG,8DClQRG,EAAA,EACA,KAAA,CAAA,YAAAC,GAAAvB,IACAwB,EAAAC,IAYAC,EAAA,CAAoC,YAAA,CACrB,CAEb,EAIF,OAAAD,EAAA,IAAA"}