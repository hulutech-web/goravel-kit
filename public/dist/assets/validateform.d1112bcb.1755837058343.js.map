{"version":3,"file":"validateform.d1112bcb.1755837058343.js","sources":["../../src/components/hulu-rule/HuluRule.vue","../../src/pages/system/crud/templates/validateform.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <vxe-toolbar>\r\n      <template #buttons>\r\n        <vxe-button status=\"primary\" @click=\"insertEvent()\">新增</vxe-button>\r\n        <vxe-button status=\"danger\" @click=\"removeSelectEvent()\">删除</vxe-button>\r\n      </template>\r\n    </vxe-toolbar>\r\n\r\n    <vxe-table border show-overflow ref=\"tableRef\" max-height=\"400\" :column-config=\"{ resizable: true }\"\r\n               :data=\"tableData\" :edit-config=\"{ trigger: 'click', mode: 'row' }\"\r\n               @edit-activated=\"editActivatedEvent\">\r\n      <vxe-column type=\"checkbox\" width=\"60\"></vxe-column>\r\n      <vxe-column field=\"column_name\" title=\"列名\" :edit-render=\"{ name: 'input' }\">\r\n      </vxe-column>\r\n      <vxe-column field=\"rule_type\" title=\"request字段类型\" :edit-render=\"{ }\">\r\n        <template #edit=\"{ row }\">\r\n          <vxe-select v-model=\"row.rule_type\" clearable transfer>\r\n            <vxe-option v-for=\"item in fieldList\" :key=\"item.label\" :value=\"item.value\"\r\n                        :label=\"item.label\"></vxe-option>\r\n          </vxe-select>\r\n        </template>\r\n      </vxe-column>\r\n      <vxe-column field=\"rule_name\" title=\"rule规则类型\" :edit-render=\"{}\">\r\n        <template #edit=\"{ row }\">\r\n          <vxe-select v-model=\"row.rule_name\" clearable transfer>\r\n            <vxe-option v-for=\"item in roleList\" :key=\"item.label\" :value=\"item.value\"\r\n                        :label=\"item.label\"></vxe-option>\r\n          </vxe-select>\r\n        </template>\r\n      </vxe-column>\r\n\r\n      <vxe-column field=\"rule_value\" title=\"规则值\" :edit-render=\"{}\">\r\n        <template #edit=\"{ row }\">\r\n          <vxe-input v-model=\"row.rule_value\"\r\n                     type=\"text\"></vxe-input>\r\n        </template>\r\n      </vxe-column>\r\n    </vxe-table>\r\n    <div class=\"mt-3\">\r\n      <a-button type=\"primary\" @click=\"onSubmit\">提交</a-button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport {ref, watch} from 'vue';\r\nimport useTable from '@/composible/useTable'\r\n\r\nconst {makeRequest} = useTable();\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: Array,\r\n    default: () => []\r\n  },\r\n  ruleCallback: {\r\n    type: Function,\r\n    default: () => {\r\n    }\r\n  }\r\n})\r\n\r\nconst emit = defineEmits(['update:modelValue'])\r\n\r\ninterface RowVO {\r\n  rule_title: string\r\n  rule_name: string\r\n  rule_value: string\r\n  rule_type: string\r\n}\r\n\r\nconst tableRef = ref<VxeTableInstance<RowVO>>()\r\nconst tableData = ref<RowVO[]>(props.modelValue)\r\n\r\nwatch(() => props.modelValue, (newVal) => {\r\n  if (newVal == null || newVal.length == 0) {\r\n    tableData.value = []\r\n    return;\r\n  } else {\r\n    tableData.value = newVal\r\n    // 从新加载一下数据\r\n    const $table = tableRef.value\r\n    if ($table) {\r\n      //设置table为可编辑状态\r\n      $table.setEditCell(row => {\r\n        return row.rule_name == 'required'\r\n      })\r\n      $table.updateData();\r\n    }\r\n  }\r\n}, {\r\n  deep: true,\r\n  immediate: true\r\n})\r\n\r\nconst roleList = ref([\r\n  {title: '必填', label: '必填', value: 'required', disabled: true},\r\n  {title: '字符串', label: '字符串', value: 'string'},\r\n  {title: '邮箱', label: '邮箱', value: 'email'},\r\n  {title: '数字', label: '数字', value: 'uint', disabled: true},\r\n  {title: '日期', label: '日期', value: 'date', disabled: true},\r\n  {title: '最小长度', label: '最小长度', value: 'min_len'},\r\n  {title: '最大长度', label: '最大长度', value: 'max_len'},\r\n  {title: '最大值', label: '最大值', value: 'max'},\r\n  {title: '最小值', label: '最小值', value: 'min'},\r\n  {title: '不等于', label: '不等于', value: 'ne'},\r\n  {title: '文件', label: '文件', value: 'slice', disabled: true},\r\n  {title: '图片', label: '图片', value: 'image', disabled: true},\r\n  {title: '数字大于0', label: '数字大于0', value: 'number', disabled: true},\r\n])\r\n\r\nconst fieldList = ref([\r\n  {title: '无符号整型', label: 'uint', value: 'uint'},\r\n  {title: '整型', label: 'int', value: 'int'},\r\n  {title: '字符串', label: 'string', value: 'string'},\r\n  {title: '64位整型', label: 'int64', value: 'int64'},\r\n  {title: '浮点型', label: 'float64', value: 'float64'},\r\n  {title: 'carbon日期', label: 'carbon.DateTime', value: 'carbon.DateTime'},\r\n  {title: 'bool类型', label: 'bool', value: 'bool'},\r\n])\r\nconst removeSelectEvent = () => {\r\n  const $table = tableRef.value\r\n  if ($table) {\r\n    $table.removeCheckboxRow()\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nconst insertEvent = () => {\r\n  const $table = tableRef.value\r\n  if ($table) {\r\n    const record: RowVO = {rule_title: '', rule_name: '', rule_value: '', rule_type: ''}\r\n    $table.insert(record)\r\n  }\r\n}\r\n\r\nconst selectRowChange = (row: RowVO) => {\r\n  addTitleHandle(row)\r\n}\r\n\r\nconst addTitleHandle = (row: RowVO) => {\r\n  switch (row.rule_name) {\r\n    case 'required':\r\n      row.rule_title = '必填'\r\n      break\r\n    case 'string':\r\n      row.rule_title = '字符串'\r\n      break\r\n    case 'email':\r\n      row.rule_title = '邮箱'\r\n      break\r\n    case 'uint':\r\n      row.rule_title = '数字'\r\n      break\r\n    case 'date':\r\n      row.rule_title = '日期'\r\n      break\r\n    case 'min_len':\r\n      row.rule_title = '最小长度'\r\n      break\r\n    case 'max_len':\r\n      row.rule_title = '最大长度'\r\n      break\r\n    case 'max':\r\n      row.rule_title = '最大值'\r\n      break\r\n    case 'min':\r\n      row.rule_title = '最小值'\r\n      break\r\n    case 'ne':\r\n      row.rule_title = '不等于'\r\n      break\r\n    case 'file':\r\n      row.rule_title = '文件'\r\n      break\r\n    case 'image':\r\n      row.rule_title = '图片'\r\n      break\r\n    case 'number':\r\n      row.rule_title = '数字大于0'\r\n      break\r\n    default:\r\n      row.rule_title = '未知'\r\n      break\r\n  }\r\n}\r\n\r\n\r\nconst editActivatedEvent = async () => {\r\n  // 获取表格数据\r\n  const $table = tableRef.value\r\n  const {fullData} = $table.getTableData()\r\n  emit('update:modelValue', fullData)\r\n\r\n}\r\n\r\n\r\nconst submitState = ref([])\r\nconst onSubmit = () => {\r\n  const $table = tableRef.value\r\n  if ($table) {\r\n    const {fullData} = $table.getTableData()\r\n    submitState.value = fullData.map(item => {\r\n      return {\r\n        rule_title: item.rule_title,\r\n        rule_name: item.rule_name,\r\n        column_name: item.column_name,\r\n        rule_type: item.rule_type,\r\n        rule_value: item.rule_value ? item.rule_value : '',\r\n      }\r\n    })\r\n    props.ruleCallback(submitState.value)\r\n  }\r\n}\r\n</script>","<template>\r\n  <div>\r\n    <HuluRule v-model=\"columnData\" :ruleCallback=\"ruleCallback\"/>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport useTable from '@/composible/useTable'\r\n\r\nconst props = defineProps({\r\n  tablename:{\r\n    type:String,\r\n    required:true\r\n  }\r\n})\r\nconst {getColumn,makeRequest} = useTable();\r\nconst columnData=ref([])\r\nconst init = async ()=>{\r\n  let data =   await getColumn(props.tablename)\r\n  //排除id,created_at,updated_at,deleted_at\r\n  columnData.value = data.filter((item)=>item['column_name']!=='id'&&item['column_name']!=='created_at'&&item['column_name']!=='updated_at'&&item['column_name']!=='deleted_at')\r\n}\r\ninit();\r\nconst ruleCallback = async (data)=>{\r\n  await makeRequest({\r\n    tablename: props.tablename,\r\n    rule_fields:data\r\n  })\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>"],"names":["props","__props","emit","__emit","tableRef","ref","tableData","watch","newVal","$table","row","roleList","fieldList","removeSelectEvent","insertEvent","record","editActivatedEvent","fullData","submitState","onSubmit","item","getColumn","makeRequest","useTable","columnData","data","ruleCallback"],"mappings":"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"}